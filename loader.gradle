apply plugin: 'com.github.johnrengelman.shadow'

evaluationDependsOn(':common')

def loomPlatform = project.property('loom.platform')

sourceSets.main.resources.srcDirs = [ 'src/main/resources', 'src/main/generated' ]

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    create("development${loomPlatform.capitalize()}") {
        extendsFrom common
    }
}

architectury {
    platformSetupLoomIde()

    if(loomPlatform == 'fabric') fabric()
    else if(loomPlatform == 'forge') forge()
    else if(loomPlatform == 'quilt') loader(loomPlatform)
    else throw new GradleException("Unknown 'loom.platform' value: ${loomPlatform} for project: '${project.name}' ('${project.path}')")
}

loom {
    if(loomPlatform == 'forge') {
        forge {
            if(accessWidenerFile.exists()) {
                convertAccessWideners = true
                extraAccessWideners.add accessWidenerFile.name
            }

            if(file("src/main/resources/${modId}.mixins.json").exists()) {
                mixinConfig "${modId}.mixins.json"
            }

            if(getRootProject().file("common/src/main/resources/${modId}-common.mixins.json").exists()) {
                mixinConfig "${modId}-common.mixins.json"
            }

            dataGen {
                mod "${modId}"
            }
        }
    }
}

dependencies {
    if (loomPlatform == 'fabric') {
        modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
        modApi "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}+${minecraftVersion}"

        modApi("dev.architectury:architectury-fabric:${architecturyDevVersion}") {
            exclude group: 'net.fabricmc'
            exclude group: 'net.fabricmc.fabric-api'
        }
    } else if (loomPlatform == 'forge') {
        forge "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"
        modApi "dev.architectury:architectury-forge:${architecturyDevVersion}"
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: "transformProduction${loomPlatform.capitalize()}")) { transitive false }
}

shadowJar {
    exclude 'architectury.common.json'
    configurations = [ project.configurations.shadowCommon ]
    classifier 'dev-shadow'
}

remapJar {
    if (loomPlatform == 'fabric') {
        injectAccessWidener = true
    }

    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier 'dev'
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

idea.module {
    excludeDirs += [
            file('.gradle'),
            file('build'),
            file('run')
    ]
}
